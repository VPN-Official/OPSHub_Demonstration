class AnalyticsMetric(TimeStampedModel, TenantScopedModel):
    name = models.CharField(max_length=100)
    metric_type = models.CharField(max_length=50)
    value = models.FloatField()
    recorded_at = models.DateTimeField()

class FinancialImpact(TimeStampedModel, TenantScopedModel):
    work_item = models.OneToOneField(WorkItem, related_name="financial_impact", on_delete=models.CASCADE)
    estimated_cost = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    actual_cost = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    penalty_applied = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    revenue_loss = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    billable_hours = models.IntegerField(default=0)

#Assets.py
class Asset(TimeStampedModel, TenantScopedModel):
    name = models.CharField(max_length=255)
    asset_type = models.CharField(max_length=100)
    status = models.CharField(max_length=50)
    criticality = models.CharField(max_length=50)
    purchase_cost = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)

class AssetConfigurationItem(TimeStampedModel, TenantScopedModel):
    asset = models.ForeignKey(Asset, related_name="configuration_items", on_delete=models.CASCADE)
    key = models.CharField(max_length=100)
    value = models.CharField(max_length=255)

class AssetComplianceCertificate(TimeStampedModel, TenantScopedModel):
    asset = models.ForeignKey(Asset, related_name="compliance_certificates", on_delete=models.CASCADE)
    certificate_type = models.CharField(max_length=100)
    expiry_date = models.DateField()
    status = models.CharField(max_length=50)

class AssetCostTracking(TimeStampedModel, TenantScopedModel):
    asset = models.OneToOneField(Asset, related_name="cost_tracking", on_delete=models.CASCADE)
    monthly_operating_cost = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    ytd_maintenance_cost = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)
    insurance_annual = models.DecimalField(max_digits=12, decimal_places=2, null=True, blank=True)

#automation.py
class AutomationRule(TimeStampedModel, TenantScopedModel):
    name = models.CharField(max_length=255)
    automation_type = models.CharField(max_length=50)  # remediation, notification
    status = models.CharField(max_length=20, default="active")

class AutomationTriggerCondition(TimeStampedModel, TenantScopedModel):
    rule = models.ForeignKey(AutomationRule, related_name="trigger_conditions", on_delete=models.CASCADE)
    work_types = models.JSONField(default=list)
    asset_types = models.JSONField(default=list, blank=True)
    keywords = models.JSONField(default=list, blank=True)

class AutomationExecutionStep(TimeStampedModel, TenantScopedModel):
    rule = models.ForeignKey(AutomationRule, related_name="execution_steps", on_delete=models.CASCADE)
    order = models.IntegerField()
    action = models.CharField(max_length=255)
    params = models.JSONField(default=dict)

class AutomationExecutionLog(TimeStampedModel, TenantScopedModel):
    rule = models.ForeignKey(AutomationRule, related_name="logs", on_delete=models.CASCADE)
    work_item = models.ForeignKey(WorkItem, on_delete=models.CASCADE)
    status = models.CharField(max_length=50)
    execution_time = models.FloatField()
    result = models.JSONField(default=dict)


#contracts.py
class Contract(TimeStampedModel, TenantScopedModel):
    customer = models.ForeignKey(Customer, related_name="contracts", on_delete=models.CASCADE)
    title = models.CharField(max_length=255)
    valid_from = models.DateField()
    valid_to = models.DateField()

class SLATarget(TimeStampedModel, TenantScopedModel):
    contract = models.ForeignKey(Contract, related_name="sla_targets", on_delete=models.CASCADE)
    work_type = models.CharField(max_length=50)
    response_minutes = models.IntegerField()
    resolution_minutes = models.IntegerField()

class PenaltyClause(TimeStampedModel, TenantScopedModel):
    contract = models.ForeignKey(Contract, related_name="penalty_clauses", on_delete=models.CASCADE)
    condition = models.CharField(max_length=255)
    penalty_amount = models.DecimalField(max_digits=12, decimal_places=2)
    penalty_type = models.CharField(max_length=50)

class CostCenter(TimeStampedModel, TenantScopedModel):
    contract = models.ForeignKey(Contract, related_name="cost_centers", on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    budget_amount = models.DecimalField(max_digits=12, decimal_places=2)


#core.py

class ExternalUser(TimeStampedModel, TenantScopedModel):
    display_name = models.CharField(max_length=255)
    role = models.CharField(max_length=100)
    skills = models.JSONField(default=list, blank=True)
    certifications = models.JSONField(default=list, blank=True)

class Team(TimeStampedModel, TenantScopedModel):
    name = models.CharField(max_length=255)
    workload_summary = models.JSONField(default=dict, blank=True)

class TeamMembership(TimeStampedModel, TenantScopedModel):
    team = models.ForeignKey(Team, related_name="memberships", on_delete=models.CASCADE)
    user = models.ForeignKey(ExternalUser, related_name="teams", on_delete=models.CASCADE)
    role = models.CharField(max_length=100, default="member")


#Customers.py
class Customer(TimeStampedModel, TenantScopedModel):
    name = models.CharField(max_length=255)

class CustomerEscalationContact(TimeStampedModel, TenantScopedModel):
    customer = models.ForeignKey(Customer, related_name="escalation_contacts", on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    role = models.CharField(max_length=100)
    email = models.EmailField()

#governance.py

class OperationalCategory(TimeStampedModel, TenantScopedModel):
    name = models.CharField(max_length=255)
    sla_override = models.JSONField(default=dict, blank=True)
    notification_teams = models.JSONField(default=list, blank=True)

class ChangeRequest(TimeStampedModel, TenantScopedModel):
    title = models.CharField(max_length=255)
    description = models.TextField()
    scheduled_start = models.DateTimeField()
    scheduled_end = models.DateTimeField()
    related_services = models.ManyToManyField(BusinessService, blank=True)

class RiskRegister(TimeStampedModel, TenantScopedModel):
    service = models.ForeignKey(BusinessService, related_name="risks", on_delete=models.CASCADE)
    description = models.TextField()
    probability = models.CharField(max_length=20)  # low, medium, high
    impact = models.CharField(max_length=20)       # low, medium, high
    status = models.CharField(max_length=20, default="open")
    mitigation_plan = models.TextField(blank=True)

#knowledge.py

class KnowledgeBaseArticle(TimeStampedModel, TenantScopedModel):
    title = models.CharField(max_length=255)
    knowledge_type = models.CharField(max_length=50)  # howto, faq, troubleshooting
    difficulty_level = models.CharField(max_length=50, default="medium")
    content = models.TextField()
    applicable_work_types = models.JSONField(default=list)
    tags = models.JSONField(default=list)
    view_count = models.IntegerField(default=0)

class KnowledgeFeedback(TimeStampedModel, TenantScopedModel):
    article = models.ForeignKey(KnowledgeBaseArticle, related_name="feedback", on_delete=models.CASCADE)
    user = models.UUIDField(null=True, blank=True)
    rating = models.IntegerField()
    comment = models.TextField(blank=True)


#logs.py

class SystemLog(TimeStampedModel, TenantScopedModel):
    timestamp = models.DateTimeField()
    level = models.CharField(max_length=20)
    source = models.CharField(max_length=255)
    category = models.CharField(max_length=50)
    message = models.TextField()
    asset = models.ForeignKey(Asset, null=True, blank=True, on_delete=models.SET_NULL)
    work_item = models.ForeignKey(WorkItem, null=True, blank=True, on_delete=models.SET_NULL)
    tags = models.JSONField(default=list)

class SystemLogCorrelation(TimeStampedModel, TenantScopedModel):
    correlation_id = models.CharField(max_length=255)
    log = models.ForeignKey(SystemLog, related_name="correlations", on_delete=models.CASCADE)

#Mixins.py

class TimeStampedModel(models.Model):
    created_at = models.DateTimeField(default=now, editable=False)
    modified_at = models.DateTimeField(auto_now=True)

    class Meta:
        abstract = True

class TenantScopedModel(models.Model):
    tenant_id = models.UUIDField(null=True, blank=True)

    class Meta:
        abstract = True

#services.py

class BusinessService(TimeStampedModel, TenantScopedModel):
    name = models.CharField(max_length=255)
    criticality = models.CharField(max_length=50)
    revenue_impact_per_hour = models.DecimalField(max_digits=12, decimal_places=2)

class ServiceComplianceRequirement(TimeStampedModel, TenantScopedModel):
    service = models.ForeignKey(BusinessService, related_name="compliance_requirements", on_delete=models.CASCADE)
    standard = models.CharField(max_length=100)
    description = models.TextField()

class ServiceComponent(TimeStampedModel, TenantScopedModel):
    service = models.ForeignKey(BusinessService, related_name="components", on_delete=models.CASCADE)
    name = models.CharField(max_length=255)
    type = models.CharField(max_length=50)

#vendors.py

class Vendor(TimeStampedModel, TenantScopedModel):
    name = models.CharField(max_length=255)
    certifications = models.JSONField(default=list, blank=True)


#workitems.py

class WorkItem(TimeStampedModel, TenantScopedModel):
    title = models.CharField(max_length=255)
    description = models.TextField()
    work_type = models.CharField(max_length=50)  # incident, request, problem
    status = models.CharField(max_length=50, default="new")
    priority = models.CharField(max_length=20)
    sla_target_minutes = models.IntegerField(default=60)
    business_service = models.ForeignKey(BusinessService, null=True, blank=True, on_delete=models.SET_NULL)
    asset = models.ForeignKey(Asset, null=True, blank=True, on_delete=models.SET_NULL)
    vendor = models.ForeignKey(Vendor, null=True, blank=True, on_delete=models.SET_NULL)

class WorkItemCommunication(TimeStampedModel, TenantScopedModel):
    work_item = models.ForeignKey(WorkItem, related_name="communications", on_delete=models.CASCADE)
    message = models.TextField()
    sender = models.CharField(max_length=255)

class WorkItemVendorOrder(TimeStampedModel, TenantScopedModel):
    work_item = models.ForeignKey(WorkItem, related_name="vendor_orders", on_delete=models.CASCADE)
    vendor = models.ForeignKey(Vendor, on_delete=models.CASCADE)
    order_details = models.JSONField(default=dict)

class WorkItemChangeRelation(TimeStampedModel, TenantScopedModel):
    work_item = models.ForeignKey(WorkItem, related_name="related_changes", on_delete=models.CASCADE)
    change_request_id = models.UUIDField()

